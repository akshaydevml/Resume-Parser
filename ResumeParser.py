#Importing required libraries and loading spaCy's language model
import os
import spacy
import nltk
import re
import pandas as pd
from pdfminer.high_level import extract_text
import csv
from typing import Union
nlp = spacy.load('en_core_web_md')

#Path of our stored pdf
pdf_path = '/Users/akshaydev/Desktop/Resumes/Sam.pdf'

#Define function to convert pdf to text and return as string, takes in the path of pdf as input.
def extract_text_from_pdf(pdf_path: str)-> str:
    return extract_text(pdf_path)

#Convert to text and store
converted_to_text = extract_text_from_pdf(pdf_path)
print(converted_to_text)

#For extracting the name, we use spaCy's pretrained model's NER feature.
#We then assume of all the entities with the 'PERSON' tag extracted, the first one is the name.
def candidate_name_extractor(converted_to_text: str)-> str:
    doc = nlp(converted_to_text)
    doc_entities = doc.ents
    doc_persons = filter(lambda x: x.label_ == 'PERSON', doc_entities)
    doc_persons = filter(lambda x: len(x.text.strip().split()) >= 2, doc_persons)
    doc_persons = map(lambda x: x.text.strip(), doc_persons)
    doc_persons = list(doc_persons)
    
    if len(doc_persons) > 0:
        return doc_persons[0]
    return "Name not provided"

Name = candidate_name_extractor(converted_to_text)
assert len(Name)>=4
print(Name)

#Phone numbers follow a definite pattern, so a REGEX pattern with some if-conditionals will reliably do the job.
PHONE_NUM = re.compile(r'[\+\(]?[1-9][0-9 .\-\(\)]{8,}[0-9]')
def extract_phone_number(converted_to_text: str)->str :
    phone = re.findall(PHONE_NUM, converted_to_text)

    if phone:
        number = ''.join(phone[0])

        if converted_to_text.find(number) >= 0 and len(number)>=10:
            return number
    return None

Phone_Number = extract_phone_number(converted_to_text)
assert len(Phone_Number)>=10
print(Phone_Number)

#Similarly for e-mail addresses.
EMAIL_REG = re.compile(r'[A-Za-z0-9\.\-+_]+@[A-Za-z0-9\.\-+_]+\.[A-Za-z]+')
def extract_emails(converted_to_text:str)->list:
    return re.findall(EMAIL_REG, converted_to_text)

Email = extract_emails(converted_to_text)
Email = ''.join(Email)
assert Email.find('@') != -1
print(Email)

#We tokenize and do pos tagging on our corpus.
#We then use NLTK's Entity Recognizer for extracting entities with the "Organization" tag. 
#We then check if those tokens contain the words defined in our 'college terms' list as a substring.
#If yes, we recognize it as an educational instituion.

college_terms = [
    'school',
    'college',
    'univers',
    'academy',
    'faculty',
    'institute',
    'faculdades',
    'Schola',
    'schule',
    'lise',
    'lyceum',
    'lycee',
    'polytechnic',
    'kolej',
    'ünivers',
    'okul',
    'University',
    'of',
    'engineering'
    
]

def extract_education(converted_to_text):
    organizations = []

#Use the NLTK entity recognizer and pos tagger to get "Organisation" names. 
    for sent in nltk.sent_tokenize(converted_to_text):
        for chunk in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(sent))):
            if hasattr(chunk, 'label') and chunk.label() == 'ORGANIZATION':
                organizations.append(' '.join(c[0] for c in chunk.leaves()))

# we search for trigrams and bigrams present in 'college terms' list
# (college, university etc...)
    education = set()
    for org in organizations:
        for word in college_terms:
            if org.lower().find(word) >= 0:
                education.add(org)

    return education


College = extract_education(converted_to_text)
tag = nltk.pos_tag(College)
for ele in tag:
    assert ele[1] == 'NN' or 'NNP'
print(College)
    
#Manually compiled a skill list of over 550 skills, prioritizing skills in the IT field. 
#Most frequent skills from other industries and soft skills are also included.
skills_list = ['Copywriting',
'Smart Contract Development',
'Data Mining',
'Perl',
'Python',
'Numpy', 
'Pandas',
'ERP Modules',
'ERP Selection',
'ERP Software',
'Sci-kit learn' ,
'SciPy',
'BeautifulSoup',
'Scrapy',
'Matplotlib',
'Seaborn',
'spaCy',
'NLTK',
'Hugging Face',
'Deep Learning',
'R',
'Matlab',
'Electrical Contracting',
'Electrical Controls',
'Electrical Controls Design',
'Electrical Design',
'Electrical Diagnosis',
'Electrical Distribution Design',
'Electrical Equipment',
'Electrical Estimating',
'Electrical Industry',
'Electrical Layouts',
'Electrical Machines',
'Electrical Maintenance',
'Electrical Muscle Stimulation',
'Electrical Panel Design',
'Electrical Plans',
'Electrical Products',
'Electrical Repairs',
'Electrical Safety',
'Electrical Sales',
'Electrical Stimulation',
'Electrical Technology',
'Electrical Testing',
'Electrical Theory',
'Electrical Troubleshooting',
'Electrical Wiring',
'Electrical Work',
'Electricity Markets',
'Electro-Mechanical Design',
'Electro-Mechanical Packaging',
'Electro-Mechanical Products',
'Synopsis Tools'
'Embedded systems',
'Semiconductor design'
'Chip Design',
'VLSI',
'Microprocessor Design',
'Microcontroller Design',
'Integrated Circuits',
'Telecommunications',
'Wireless Systems',
'Hive',
'Data Science',
'Computer Vision',
'PyTorch',
'Ruby',
'HTML',
'CSS',
'Javascript',
'Video Editing',
'User Interface Design',
'Social Media',
'Graphic Design',
'Project Management',
'Computer Troubleshooting',
'Accounting'
'Finance',
'Business Analysis',
'Patient Care',
'Macro Economics',
'Micro Economics',
'Server Maintenance',
'Automotive Services',
'Marketing',
'SEO',
'SEM',
'Cloud Distributed Computing',
'Database Management',
'Photo Editing',
'Microsoft Office Suite',
'Microsoft Word',
'Microsoft Powerpoint',
'Microsoft Excel',
'Microsoft Onenote',
'Google Drive Suite',
'Google Cloud',
'Oracle',
'Oracle AIM',
'Oracle AR',
'Oracle ASM',
'Oracle Access Manager',
'Oracle Adaptive Access Manager',
'Oracle Advanced Replic',
'Oracle Agile PLM',
'Oracle Application Development Framework (ADF)',
'Oracle Application Express',
'Oracle Application Server',
'Oracle Applications',
'Oracle BIEE',
'Oracle BOM',
'Oracle BPEL',
'Oracle BPM',
'Oracle CRM',
'Oracle Certification Program (OCP)',
'Oracle Client',
'Oracle Clinical',
'Oracle Coherence',
'Oracle Collaboration Suite',
'Oracle Data Integrator (ODI)',
'Oracle Database',
'Oracle Database Administration',
'Oracle Designer',
'Oracle Developer Suite',
'Oracle Discoverer',
'Oracle E-Business Suite',
'Oracle ERP',
'Oracle ERP Implementations',
'Oracle Enterprise Linux',
'Oracle Enterprise Manager',
'Oracle Financials',
'Oracle Forms',
'Oracle Fusion Middleware',
'Oracle General Ledger',
'Oracle Grid',
'Oracle HR',
'Oracle IPM',
'Oracle Identity Manager',
'Oracle Implementations',
'Oracle Installation',
'Oracle Lease Management',
'Oracle Manufacturing',
'Oracle OLAP',
'Oracle On Demand',
'Oracle Order Management',
'Oracle PIM',
'Oracle Policy Automation',
'Oracle Pro*C',
'Oracle Project Accounting',
'Oracle Quality',
'Oracle RAC',
'Oracle RDC',
'Oracle Report Builder',
'Oracle Reports',
'Oracle Retail',
'Oracle SCM',
'Oracle SOA Suite',
'Oracle SQL Developer',
'Oracle Security',
'Oracle Service Bus',
'Oracle Spatial',
'Oracle Streams',
'Oracle Support',
'Oracle Text',
'Oracle Tutor',
'Oracle VM',
'Oracle Warehouse Builder',
'Oracle Warehouse Management',
'Oracle XE',
'Open Source Development',
'Open Source Integration',
'Open Source Licensing',
'Open Source Platforms',
'Open Source Software',
'Open Space',
'Open Space Facilitation',
'Open Space Planning',
'Open Standards',
'Open Systems',
'Open Systems Architecture',
'Open Text Livelink',
'Open Trainings',
'Open Verification Methodology',
'Open Water Diver',
'Open Workbench',
'Open XML',
'Open to Buy Management',
'Open-mindedness',
'OpenAL',
'OpenAir',
'OpenBSD',
'OpenCL',
'OpenCMS',
'OpenCV',
'OpenClinica',
'OpenDS',
'OpenERP',
'OpenESB',
'OpenEdge',
'OpenEmbedded',
'OpenFOAM',
'OpenFlow',
'OpenFrameworks',
'OpenGL',
'OpenGL ES',
'OpenGL Shading Language (GLSL)',
'OpenHire',
'OpenID',
'OpenJPA',
'OpenLDAP',
'OpenLaszlo',
'OpenLayers',
'OpenMP',
'OpenMPI',
'OpenMax',
'OpenNI',
'OpenNMS',
'OpenOffice',
'OpenOffice.org',
'OpenProj',
'OpenROAD',
'OpenSCAD',
'OpenSER',
'OpenSIPS',
'OpenSSH',
'OpenSSL',
'OpenSSO',
'OpenSTA',
'OpenSceneGraph',
'OpenSees',
'OpenSim',
'OpenSocial',
'OpenSolaris',
'OpenSpirit',
'OpenStack',
'OpenSuse',
'OpenTable',
'OpenUP',
'OpenVAS',
'OpenVG',
'OpenVMS (VMS)',
'OpenVPN',
'OpenVZ',
'OpenWRT',
'OpenWorks',
'OpenX',
'Openbravo',
'Opencart',
'Openfiler',
'Openfire',
'Procurement',
'Procurement Contracts',
'Procurement Outsourcing',
'Producción de vídeo',
'Producción musical',
'Producer Licensing',
'Product Acceptance',
'Product Acquisitions',
'Product Adoption',
'Product Analysis',
'Product Assortment Planning',
'Product Briefs',
'Product Catalog',
'Product Catalogues',
'Product Certification',
'Product Classification',
'Product Communication',
'Product Complaints',
'Product Compliance',
'Product Concept',
'Product Cost Analysis',
'Product Costing',
'Product Customization',
'Product Delivery',
'Product Demonstration',
'Product Descriptions',
'Product Design',
'Product Design Support',
'Product Differentiation',
'Product Discovery',
'Product Display',
'Product Distribution',
'Product Diversification',
'Product Engineering',
'Radio Network Controller (RNC)',
'Radio Network Design',
'Radio Network Optimization',
'Social Media',
'Real Time Reports',
'Real Time Streaming Protocol (RTSP)',
'Real Time System Design',
'Real-Time Bidding (RTB)',
'Real-Time Operating Systems (RTOS)',
'Real-Time Polymerase Chain Reaction (qPCR)',
'Real-Time Transport Protocol (RTP)',
'Real-Time Workshop',
'Real-time Control',
'Real-time Control Systems',
'Real-time Data',
'Real-time Data Acquisition',
'Real-time Graphics',
'Real-time Marketing',
'Real-time Monitoring',
'Real-time Rendering',
'Real-time Simulation',
'Robot Framework',
'Robot Programming',
'Robotic Design',
'Robotic Surgery',
'Robotic Welding',
'Robotics',
'Robotium',
'Scara Robot',
'Robust Control',
'Robust Design',
'Robust Engineering',
'Robust Optimization',
'SAP Implementation',
'SAP Inventory Management',
'SAP Logistics',
'SAP Logistics Execution',
'SAP Lumira',
'SAP MDM',
'SAP MII',
'SAP Materials Management (SAP MM)',
'SAP Mobile',
'SAP NetWeaver Business Warehouse (SAP BW)',
'SAP Netweaver',
'SAP OM',
'SAP PA',
'SAP PM Module',
'SAP PP',
'SAP PS',
'SAP Portal',
'SAP Pre-Sales',
'SAP Procurement',
'SAP Production Planning',
'SAP Products',
'SAP Project Management',
'SAP Projects',
'SAP Retail',
'SAP SE',
'SAP SRM',
'SAP Sales & Distribution',
'SAP Security Administration',
'SAP Skills',
'SAP Smart Forms',
'SAP Solution Architecture',
'SAP Solutions',
'SAP Supply Chain',
'SAP System',
'SAP Testing',
'SAP Travel Management',
'SAP Variant Configuration',
'SAP Visual Composer',
'SAP Warehouse Management',
'SAP Workflow',
'Supply Chain Consulting',
'Supply Chain Engineering',
'Supply Chain Operations',
'Supply Chain Optimization',
'Supply Chain Security',
'Supply Chain Software',
'Supply Management',
'Supply Network Planning',
'Supply Operations',
'Supply Ordering',
'Supply Purchasing',
'Supply Strategy',
'Support Analysts',
'Support Engineers',
'Support Management',
'Support Services Management',
'SAP XI',
'Pivot tables',
'Trello',
'Zoom',
'Blockchain',
'Swift',
'SAS', 
'MySQL',
'NoSQL',
'Apache',
'Spark',
'Marketing Campaign Management',
'Google Analytics',
'Google Search Console',
'Content Management Systems (CMS)',
'WordPress',
'A/B testing',
'Ahrefs',
'SEMrush',
'PageOptimizer Pro',
'PPC',
'MailChimp',
'Email writing',
'Copywriting',
'Copyediting' ,
'Content management',
'Grant writing',
'Storytelling',
'Storyboarding',
'Writing press release',
'Report writing',
'Formal presentations',
'Investigative journalism',
'SEO copywriting',
'Software Revision Control Systems',
'Android Development',
'OpenGL', 
'Vulkan',
'iOS SDK'
'FHIR/EPIC development',
'Stencyl', 
'CopperCube'
'Unity 3D', 
'Unreal Engine',
'AppGameKit', 
'GameGuru',
'DirectX'
'iOS App Development',
'Web Architecture Development Framework',
'Angular',
'Node', 
'Swift',
'C#',
'Java',
'Objective-C',
'Fortran',
'Azure',
'AWS',
'User Interface (UI) Design',
'User Experience (UX) Design',
'Adobe Creative Suite',
'Figma', 
'Sketch',
'Digital Product Design Software',
'InVision',
'Zeppelin',
'Video Production Software',
'Adobe Premiere Pro', 
'Final Cut Pro',  
'Corel VideoStudio Ultimate',
'Typography',
'Print Design',
'Illustration',
'Photo composition',
'Color correction',
'Cloud Architecture',
'Networking Communication',
'Cloud Middleware Technologies',
'JSON',
'MS Oﬃce'
'REST',
'Flask',
'Docker',
'Django',
'Shopify',
'CodeIgniter', 
'Laravel',
'Instacart',
'Encryption Algorithms',
'Authentication Systems',
'Risk Assessment',
'Cryptography',
'Virtual and Host-based Firewalls',
'Incident response',
'Wireshark' ,
'Nagios',
'Ping Identity',
'Portswigger',
'BurP Suite',
'Symantec',
'Flutter',
'React',
'C++',
'Bash',
'Git',
'CVS',
'Ruby',
'PHP',
'Perl',
'Graylog', 
'Logstash',
'Monotone',
'Ansible', 
'Chef', 
'CFEngine', 
'Puppet'
'AutoCAD',
'Oracle',
'SQL',
'Keras',
'Tensorflow',
'Project Management',
'Quantity Surveying',
'Quality Assurance',
'Carpentry',
'Machine Operator',
'CNC Operator',
'Laithe Machine Operator',
'Foreman',
'Sales',
'Decorative Painter', 
'Gilding',
'Joinery Mechanic',
'Painting Expert',
'VHDL',
'HDL',
'Digital signal processing',
'Simulation modeling',
'Heterogeneous systems design',
'Wireless communications networks',
'Engineering Design',
'Electronic Troubleshooting',
'Test Engineering',
'Accountant',
'Industrial Control Systems',
'Statistics',
'Calculus',
'Probability Theory',
'Crisis Management'
'Data analysis',
'Structural analysis',
'HVAC',
'Product Design',
'Mathematical Modelling '
'System Design',
'Control Systems',
'Automobile Engineering',
'Vehicle Dynamics',
'Graphic Design',
'Content Writing',
'Adaptability', 
'Artistic aptitude',
'Creativity',
'Critical Thinking',  
'Design aptitude',
'Desire to learn',
'Flexibility',
'Innovation',
'Logical Thinking',
'Problem Solving',
'Research',
'Resourcefulness',
'Thinking outside the box',
'Tolerance of change',
'Troubleshooting',
'Value education',
'Willingness to learn',
'AGILE',
'SCRUM',
'.NET',
'.NET CLR',
'.NET Compact Framework',
'.NET Framework',
'.NET Remoting',
'.Net Core',
"CNC Machine",
"CNC Manufacturing",
"CNC Mill",
"CNC Operation",
"CNC Programming",
"CNC Software",
'Zoom',
'ZoomInfo',
'ZoomText',
'Artificial Intelligence',
'Robotics']
skills_list = [x.lower() for x in skills_list]

#We clean & tokenize the corpus, check if any tokens are in the skills list, if a match is found we append it to the list of found skills.
def extract_skills(converted_to_text:str)->set:
    stop_words = set(nltk.corpus.stopwords.words('english'))
    word_tokens = nltk.tokenize.word_tokenize(converted_to_text)

    # remove the stop words
    filtered_tokens = [w for w in word_tokens if w not in stop_words]

    # remove the punctuation
    filtered_tokens = [w for w in word_tokens if w.isalpha()]

    # generate bigrams and trigrams (such as artificial intelligence)
    bigrams_trigrams = list(map(' '.join, nltk.everygrams(filtered_tokens, 2, 3)))

    # we create a set to keep the results in.
    found_skills = set()

    # we search for each token in our skills database
    for token in filtered_tokens:
        if token.lower() in skills_list:
            found_skills.add(token)

    # we search for each bigram and trigram in our skills database
    for ngram in bigrams_trigrams:
        if ngram.lower() in skills_list:
            found_skills.add(ngram)

    return found_skills
    print (bigrams_trigrams)

Skills = set(extract_skills(converted_to_text))
print(Skills)

#List of 72 most common languages for checking against.
lang_list = ['Afrikanns', 'Albanian', 'Arabic', 'Armenian', 'Basque', 'Bengali', 'Bulgarian', 'Catalan', 'Cambodian', 'Chinese (Mandarin)', 'Croation', 'Czech', 'Danish', 'Dutch', 'English', 'Estonian', 'Fiji', 'Finnish', 'French', 'Georgian', 'German', 'Greek', 'Gujarati', 'Hebrew', 'Hindi', 'Hungarian', 'Icelandic', 'Indonesian', 'Irish', 'Italian', 'Japanese', 'Javanese', 'Korean', 'Latin', 'Latvian', 'Lithuanian', 'Macedonian', 'Malay', 'Malayalam', 'Maltese', 'Maori', 'Marathi', 'Mongolian', 'Nepali', 'Norwegian', 'Persian', 'Polish', 'Portuguese', 'Punjabi', 'Quechua', 'Romanian', 'Russian', 'Samoan', 'Serbian', 'Slovak', 'Slovenian', 'Spanish', 'Swahili', 'Swedish ', 'Tamil', 'Tatar', 'Telugu', 'Thai', 'Tibetan', 'Tonga', 'Turkish', 'Ukranian', 'Urdu', 'Uzbek', 'Vietnamese', 'Welsh', 'Xhosa']

 #Function to check if a token matches a word in the language list, if it does, append it to the 'languages' list.
def lang_extractor(converted_to_text:str)->list:
    languages = []
    for sent in nltk.sent_tokenize(converted_to_text):
        for word in nltk.word_tokenize(sent):
            if word in lang_list:
                languages.append(word)
    return languages
    
Languages_Spoken = lang_extractor(converted_to_text)
print(Languages_Spoken)

#Function to pull company names, we use spaCy's pretrained model for NER.
#Entities with the "ORG" tag are extracted. 
#We then check if any of the entities correspond to tokens in college or skills, if they do, we delete them.
#Then we check for tokens below length 30 and append them to a set.
#This is a crude heuristic, but works most of the time in extracting company name even if other tokens creep in.
#We also make the assumption that the company name will only be in the first few entities(they usually are).
def company_name_extractor(converted_to_text:str)->str:
    doc = nlp(converted_to_text)
    doc_entities = doc.ents
    doc_org = filter(lambda x: x.label_ == 'ORG', doc_entities)
    doc_org = filter(lambda x: len(x.text.strip().split()) >= 2, doc_org)
    doc_org = map(lambda x: x.text.strip(), doc_org)
    doc_org = list(doc_org)
    for word in doc_org:
        if word in College:
            doc_org.remove(word)
    for word in doc_org:
        if word in Skills:
            doc_org.remove(word)
    possible_company_names = [x for x in doc_org if len(x) <= 30]
    return list(set(possible_company_names[0:4]))
   
Companies_Worked_At = company_name_extractor(converted_to_text)
print(Companies_Worked_At)

interest_and_hobbies_list = ['3D printing',
'Acting',
'Aeromodeling',
'Air sports',
'Airbrushing',
'Aircraft Spotting',
'Airsoft',
'Airsofting',
'Amateur astronomy',
'Amateur geology',
'Amateur Radio',
'American football',
'Animal fancy',
'Animals/pets/dogs',
'Antiquing',
'Antiquities',
'Aqua-lung',
'Aquarium (Freshwater & Saltwater)',
'Archery',
'Art collecting',
'Arts',
'Association football',
'Astrology',
'Astronomy',
'Audiophilia',
'Australian rules football',
'Auto audiophilia',
'Auto racing',
'Backgammon',
'Backpacking',
'Badminton',
'Base Jumping',
'Baseball',
'Basketball',
'Baton Twirling',
'Beach Volleyball',
'Beach/Sun tanning',
'Beachcombing',
'Beadwork',
'Beatboxing',
'Becoming A Child Advocate',
'Beekeeping',
'Bell Ringing',
'Belly Dancing',
'Bicycle Polo',
'Bicycling',
'Billiards',
'Bird watching',
'Birding',
'Birdwatching',
'Blacksmithing',
'Blogging',
'BMX',
'Board games',
'Board sports',
'BoardGames',
'Boating',
'Body Building',
'Bodybuilding',
'Bonsai Tree',
'Book collecting',
'Bookbinding',
'Boomerangs',
'Bowling',
'Boxing',
'Brazilian jiu-jitsu',
'Breakdancing',
'Brewing Beer',
'Bridge',
'Bridge Building',
'Bringing Food To The Disabled',
'Building A House For Habitat For Humanity',
'Building Dollhouses',
'Bus spotting',
'Butterfly Watching',
'Button Collecting',
'Cake Decorating',
'Calligraphy',
'Camping',
'Candle making',
'Canoeing',
'Car Racing',
'Card collecting',
'Cartooning',
'Casino Gambling',
'Cave Diving',
'Ceramics',
'Cheerleading',
'Chess',
'Church/church activities',
'Cigar Smoking',
'Climbing',
'Cloud Watching',
'Coin Collecting',
'Collecting',
'Collecting Antiques',
'Collecting Artwork',
'Collecting Hats',
'Collecting Music Albums',
'Collecting RPM Records',
'Collecting Sports Cards (Baseball, Football, Basketball, Hockey)',
'Collecting Swords',
'Color guard',
'Coloring',
'Comic book collecting',
'Compose Music',
'Computer activities',
'Computer programming',
'Conworlding',
'Cooking',
'Cosplay',
'Cosplaying',
'Couponing',
'Crafts',
'Crafts (unspecified)',
'Creative writing',
'Cricket',
'Crochet',
'Crocheting',
'Cross-Stitch',
'Crossword Puzzles',
'Cryptography',
'Curling',
'Cycling',
'Dance',
'Dancing',
'Darts',
'Debate',
'Deltiology (postcard collecting)',
'Diecast Collectibles',
'Digital arts',
'Digital Photography',
'Disc golf',
'Do it yourself',
'Dodgeball',
'Dog sport',
'Dolls',
'Dominoes',
'Dowsing',
'Drama',
'Drawing',
'Driving',
'Dumpster Diving',
'Eating out',
'Educational Courses',
'Electronics',
'Element collecting',
'Embroidery',
'Entertaining',
'Equestrianism',
'Exercise (aerobics, weights)',
'Exhibition drill',
'Falconry',
'Fast cars',
'Felting',
'Fencing',
'Field hockey',
'Figure skating',
'Fire Poi',
'Fishing',
'Fishkeeping',
'Flag Football',
'Floorball',
'Floral Arrangements',
'Flower arranging',
'Flower collecting and pressing',
'Fly Tying',
'Flying',
'Footbag',
'Football',
'Foraging',
'Foreign language learning',
'Fossil hunting',
'Four Wheeling',
'Freshwater Aquariums',
'Frisbee Golf – Frolf',
'Gambling',
'Games',
'Gaming (tabletop games and role-playing games)',
'Garage Saleing',
'Gardening',
'Genealogy',
'Geocaching',
'Glassblowing',
'Glowsticking',
'Gnoming',
'Go',
'Go Kart Racing',
'Going to movies',
'Golf',
'Golfing',
'Gongoozling',
'Graffiti',
'Grip Strength',
'Guitar',
'Gun Collecting',
'Gunsmithing',
'Gymnastics',
'Gyotaku',
'Handball',
'Handwriting Analysis',
'Hang gliding',
'Herping',
'Hiking',
'Home Brewing',
'Home Repair',
'Home Theater',
'Homebrewing',
'Hooping',
'Horse riding',
'Hot air ballooning',
'Hula Hooping',
'Hunting',
'Ice hockey',
'Ice skating',
'Iceskating',
'Illusion',
'Impersonations',
'Inline skating',
'Insect collecting',
'Internet',
'Inventing',
'Jet Engines',
'Jewelry Making',
'Jigsaw Puzzles',
'Jogging',
'Judo',
'Juggling',
'Jukskei',
'Jump Roping',
'Kabaddi',
'Kart racing',
'Kayaking',
'Keep A Journal',
'Kitchen Chemistry',
'Kite Boarding',
'Kite flying',
'Kites',
'Kitesurfing',
'Knapping',
'Knife making',
'Knife throwing',
'Knitting',
'Knotting',
'Lacemaking',
'Lacrosse',
'Lapidary',
'LARPing',
'Laser tag',
'Lasers',
'Lawn Darts',
'Learn to Play Poker',
'Learning A Foreign Language',
'Learning An Instrument',
'Learning To Pilot A Plane',
'Leather crafting',
'Leathercrafting',
'Lego building',
'Legos',
'Letterboxing',
'Listening to music',
'Locksport',
'Machining',
'Macramé',
'Macrame',
'Magic',
'Mahjong',
'Making Model Cars',
'Marbles',
'Marksmanship',
'Martial arts',
'Matchstick Modeling',
'Meditation',
'Metal detecting',
'Meteorology',
'Microscopy',
'Mineral collecting',
'Model aircraft',
'Model building',
'Model Railroading',
'Model Rockets',
'Models',
'Motor sports',
'Motorcycles',
'Mountain Biking',
'Mountain Climbing',
'Mountaineering',
'Movie and movie memorabilia collecting',
'Mushroom hunting/Mycology',
'Musical Instruments',
'Nail Art',
'Needlepoint',
'Netball',
'Nordic skating',
'Orienteering',
'Origami',
'Owning An Antique Car',
'Paintball',
'Painting',
'Papermache',
'Papermaking',
'Parachuting',
'Paragliding or Power Paragliding',
'Parkour',
'People Watching',
'Photography',
'Piano',
'Pigeon racing',
'Pinochle',
'Pipe Smoking',
'Planking',
'Playing music',
'Playing musical instruments',
'Playing team sports',
'Poker',
'Pole Dancing',
'Polo',
'Pottery',
'Powerboking',
'Protesting',
'Puppetry',
'Puzzles',
'Pyrotechnics',
'Quilting',
'R/C Boats',
'R/C Cars',
'R/C Helicopters',
'R/C Planes',
'Racing Pigeons',
'Racquetball',
'Radio-controlled car racing',
'Rafting',
'Railfans',
'Rappelling',
'Rapping',
'Reading',
'Reading To The Elderly',
'Record collecting',
'Relaxing',
'Renaissance Faire',
'Renting movies',
'Rescuing Abused Or Abandoned Animals',
'Robotics',
'Rock balancing',
'Rock climbing',
'Rock Collecting',
'Rockets',
'Rocking AIDS Babies',
'Roleplaying',
'Roller derby',
'Roller skating',
'Rugby',
'Rugby league football',
'Running',
'Sailing',
'Saltwater Aquariums',
'Sand art',
'Sand Castles',
'Scrapbooking',
'Scuba diving',
'Sculling or Rowing',
'Sculpting',
'Sea glass collecting',
'Seashell collecting',
'Self Defense',
'Sewing',
'Shark Fishing',
'Shooting',
'Shooting sport',
'Shopping',
'Shortwave listening',
'Singing',
'Singing In Choir',
'Skateboarding',
'Skeet Shooting',
'Sketching',
'Skiing',
'Skimboarding',
'Sky Diving',
'Skydiving',
'Slack Lining',
'Slacklining',
'Sleeping',
'Slingshots',
'Slot car racing',
'Snorkeling',
'Snowboarding',
'Soap Making',
'Soapmaking',
'Soccer',
'Socializing with friends/neighbors',
'Speed Cubing (rubix cube)',
'Speed skating'
'Spelunkering',
'Spending time with family/kids'
'Sports',
'Squash',
'Stamp Collecting',
'Stand-up comedy',
'Stone collecting',
'Stone skipping',
'Storm Chasing',
'Storytelling',
'String Figures',
'Sudoku',
'Surf Fishing',
'Surfing',
'Survival',
'Swimming',
'Table football',
'Table tennis',
'Taekwondo',
'Tai chi',
'Tatting',
'Taxidermy',
'Tea Tasting',
'Tennis',
'Tesla Coils',
'Tetris',
'Textiles',
'Texting',
'Tombstone Rubbing',
'Tool Collecting',
'Tour skating',
'Toy Collecting',
'Train Collecting',
'Train Spotting',
'Trainspotting',
'Traveling',
'Treasure Hunting',
'Trekkie',
'Triathlon',
'Tutoring Children',
'TV watching',
'Ultimate Frisbee',
'Urban exploration',
'Vehicle restoration',
'Video game collecting',
'Video Games',
'Video gaming',
'Videophilia',
'Vintage cars',
'Violin',
'Volleyball',
'Volunteer',
'Walking',
'Warhammer',
'Watching movies',
'Watching sporting events',
'Water sports',
'Weather Watcher',
'Web surfing',
'Weightlifting',
'Windsurfing',
'Wine Making',
'Wingsuit Flying',
'Wood carving',
'Woodworking',
'Working In A Food Pantry',
'Working on cars',
'World Record Breaking',
'Worldbuilding',
'Wrestling',
'Writing',
'Writing Music',
'Writing Songs',
'Yo-yoing',
'Yoga',
'YoYo',
'Ziplining',
'Zumba']

#Function to extract interests and hobbies by checking it against the interest_and_hobbies list.
def interests_and_hobbies_extractor(converted_to_text:str)->list:
    interests_and_hobbies = []
    for sent in nltk.sent_tokenize(converted_to_text):
        for word in nltk.word_tokenize(sent):
            if word in interest_and_hobbies_list:
                interests_and_hobbies.append(word)
    return interests_and_hobbies
    
Interests_and_Hobbies = set(interests_and_hobbies_extractor(converted_to_text))
print(Interests_and_Hobbies)

#Function to build a pandas dataframe consisting of extracted keywords and corresponding columns.
def csv_builder()->'Pandas Dataframe':
    with open('parsed_resume1.csv', 'w', newline='') as file:
        fieldnames = ['Name','Phone Number','E-mail','College','Skills','Languages Spoken','Companies Worked At','Interests_and_Hobbies']
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerow({'Name': Name,'Phone Number':Phone_Number,'E-mail':Email,'College':College,'Skills':Skills,'Languages Spoken':Languages_Spoken,'Companies Worked At':Companies_Worked_At,'Interests_and_Hobbies':Interests_and_Hobbies})
    with open('parsed_resume1.csv', 'r') as file:
        df = pd.read_csv('parsed_resume1.csv')
    return df
    
csv_builder()







